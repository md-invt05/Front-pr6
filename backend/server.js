const { ApolloServer, gql } = require('apollo-server-express'); 

const express = require("express");
const path = require("path");

const yaml = require("yamljs");
const swaggerUi = require("swagger-ui-express");

const WebSocket = require('ws'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket


// –í—Å—Ç–∞–≤–∫–∞ json —Ñ–∞–π–ª–∞
const fs = require('fs');
const { json } = require("stream/consumers");
const productsFile = path.join(__dirname, "products.json");

//Cache
const cachePath = path.join(__dirname, 'cache.json');


require('dotenv').config(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function loadProducts() {
    return JSON.parse(fs.readFileSync(productsFile, 'utf-8'));
}

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function requireAuth(req, res, next) {
  if (!req.session.user) {
    return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  }
  next();
}


// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã GraphQL
const typeDefs = gql`
  type Product {
    id: ID!
    name: String!
    price: Float!
    description: String
    categories: [String]
  }

  type Query {
    products: [Product]
    product(id: ID!): Product
  }
`;


const app = express();
const PORT = 3000;
let users = []; // –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

const resolvers = {
    Query: {
        products: () => loadProducts(), 
        product: (_, { id }) => loadProducts().find(p => p.id == id),
    }
};

async function startServer() {
    await server.start();
    server.applyMiddleware({ app });
}



// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–∫–∏ –¥–ª—è middleware
app.use(express.json());
app.use("/admin", express.static(path.join(__dirname, "../public_admin")));
app.use("/", express.static(path.join(__dirname, "../public_user")));


const session = require('express-session');
const cookieParser = require('cookie-parser');
const bcrypt = require('bcrypt');

// –ö—É–∫–∏
app.use(cookieParser());

// –°–µ—Å—Å–∏–∏
app.use(session({
 secret: 'my_secret_session_key', // –ú–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ .env
 resave: false,
 saveUninitialized: false,
 cookie: {
 httpOnly: true, // –ë–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ JS
 sameSite: 'lax', // –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç CSRF
 maxAge: 60 * 60 * 1000 // 1 —á–∞—Å
 }
}));

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
app.get('/profile', requireAuth, (req, res) => {
  res.json({ user: req.session.user });
});

// –í—ã—Ö–æ–¥ (—É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏)
app.post('/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
    }
    res.clearCookie('connect.sid'); // –£–¥–∞–ª—è–µ–º cookie —Å–µ—Å—Å–∏–∏
    res.json({ message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
  });
});

app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  const existingUser = users.find(user => user.username === username);

  if (existingUser) {
    return res
      .status(400)
      .json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
  }

  try {
    const hashedPassword = await bcrypt.hash(password, 10); // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const newUser = {
      id: users.length + 1,
      username,
      password: hashedPassword
    };
    users.push(newUser);
    res.status(201).json({ message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ' });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', error: err.message });
  }
});

app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username);

  if (!user) {
    return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const passwordMatch = await bcrypt.compare(password, user.password);

  if (!passwordMatch) {
    return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
  }

  // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
  req.session.user = {
    id: user.id,
    username: user.username
  };

  res.json({ message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
});


app.get('/data', requireAuth, (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—ç—à
    if (fs.existsSync(cachePath)) {
      const stats = fs.statSync(cachePath);
      const now = new Date();
      const modified = new Date(stats.mtime);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞—Ä—à–µ –ª–∏ —Ñ–∞–π–ª 1 –º–∏–Ω—É—Ç—ã
      const isFresh = (now - modified) < 60 * 1000;
      if (isFresh) {
        const cachedData = fs.readFileSync(cachePath, 'utf8');
        return res.json({ source: 'cache', data: JSON.parse(cachedData) });
      }
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
    const freshData = {
      timestamp: new Date().toISOString(),
      message: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞',
      user: req.session.user
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync(cachePath, JSON.stringify(freshData, null, 2));
    
    // –û—Ç–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç—É
    res.json({ source: 'generated', data: freshData });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', error: error.message });
  }
});

  

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
app.get("/api/products", (req, res) => {
    try {
        const products = JSON.parse(fs.readFileSync(productsFile,'utf-8'));
        res.json(products);
    } catch (error) {
        res.status(500).json({error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"});
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.post("/api/products", (req, res) => {
    try {
        const newProducts = req.body;
        let products = JSON.parse(fs.readFileSync(productsFile, "utf-8"));

        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
        const maxId = products.length > 0 ? Math.max(...products.map(p => p.id)) : 0;

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º—Å—è ID
        newProducts.forEach((product, index) => {
            product.id = maxId + index + 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            products.push(product);
        });

        fs.writeFileSync(productsFile, JSON.stringify(products, null, 2));
        res.status(201).json({ message: "–¢–æ–≤–∞—Ä(—ã) –¥–æ–±–∞–≤–ª–µ–Ω(—ã)", products });
    } catch (error) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞" });
    }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.put("/api/products/:id", (req, res) => {
    try {
        const id = Number(req.params.id);
        let products = JSON.parse(fs.readFileSync(productsFile, "utf-8"));
        const index = products.findIndex(p => p.id === id);

        if (index === -1) {
            return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        products[index] = { ...products[index], ...req.body };
        fs.writeFileSync(productsFile, JSON.stringify(products, null, 2));
        res.json({ message: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω", product: products[index] });
    } catch (error) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞" });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.delete("/api/products/:id", (req, res) => {
    try {
        const id = Number(req.params.id);
        let products = JSON.parse(fs.readFileSync(productsFile, "utf-8"));
        products = products.filter(p => p.id !== id);

        fs.writeFileSync(productsFile, JSON.stringify(products, null, 2));
        res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω" });
    } catch (error) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞" });
    }
});




// Main page admin
app.get("/admin", (req, res) => {
    res.sendFile(path.join(__dirname, "../public_admin/index.html"));
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ user
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "../public_user/index.html"));
    //console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
    //res.sendFile(filePath);
});

// –°–æ–∑–¥–∞—ë–º GraphQL-—Å–µ—Ä–≤–µ—Ä
const server = new ApolloServer({ typeDefs, resolvers });

async function startServer() {
    await server.start();
    server.applyMiddleware({ app });


    // Swagger
    const swaggerDocument = yaml.load(path.join(__dirname, "../swagger.yaml"));
    console.log("Swagger YAML –∑–∞–≥—Ä—É–∂–µ–Ω:", swaggerDocument);
    app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocument));
    
    
    app.listen(PORT, () => {
        console.log(`GraphQL API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}/graphql`);
        console.log(`Swagger API Docs: http://localhost:${PORT}/api-docs`);
        // –°–æ–∑–¥–∞—ë–º WebSocket-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080
        const wss = new WebSocket.Server({ port: 8080 });
        wss.on('connection', (ws) => {
            console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É');

            ws.on('message', (message) => {
                console.log('üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', message.toString());

                let data;
                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ JSON
                    data = JSON.parse(message);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
                    return;
                }
                // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                wss.clients.forEach(client => {
                    if (client !== ws && client.readyState === WebSocket.OPEN) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ JSON
                        client.send(JSON.stringify({ text: data.text }));
                    }
                });
            });

            ws.on('close', () => {
                console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
            });
        });
        console.log('WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8080');
    });

}



  
  

startServer(); // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞

